version: 2.1

orbs:
  ocean: dwave/ocean@1.3

environment:
  PIP_PROGRESS_BAR: 'off'

jobs:
  test-linux:
    parameters:
      python-version:
        type: string

    docker:
      - image: circleci/python:<< parameters.python-version >>

    working_directory: ~/repo

    steps:
      - checkout

      - ocean/pip-install:
          requirements: tests/requirements.txt
          cache: true

      - ocean/pip-install:
          packages: .
          cache: false

      - ocean/coverage-run-unittest

  test-macos:
    parameters:
      python-version:
        type: string

    executor:
      name: ocean/macos
      xcode: "13.2.0"

    steps:
      - checkout

      - ocean/brew-install-pyenv

      - ocean/pyenv-install-python:
          python-version: << parameters.python-version >>
          cache: true

      - ocean/pip-install:
          requirements: tests/requirements.txt
          cache: true

      - ocean/pip-install:
          packages: .
          cache: false

      - ocean/coverage-run-unittest

  test-individual-pkgs:
    docker:
      - image: circleci/python:3.10

    working_directory: ~/repo

    steps:
      - checkout

      - run: &initialize-submodules
          name: initialize submodules
          command: |
            git submodule init
            git submodule update

      - run: &create-virtualenv
          name: create virtualenv
          command: |
            python -m venv env

      - run:
          name: install penaltymodel dependencies
          command: |
            . env/bin/activate
            cd penaltymodel
            pip install -r requirements.txt
            pip install penaltymodel_core/
            pip install penaltymodel_cache/
            pip install penaltymodel_maxgap/
            pip install penaltymodel_mip/
            pip install penaltymodel_lp/

      - run:
          name: install dependencies
          command: |
            . env/bin/activate
            python --version
            for subdir in */; do
              if [[ -f "$subdir"/tests/requirements.txt ]]; then
                pip install -r "$subdir"/tests/requirements.txt
              fi
              if [[ -f "$subdir"/test_requirements.txt ]]; then
                pip install -r "$subdir"/test_requirements.txt
              fi
              done
            pip install cython wheel
            pip install .
            dwave install --all --yes

      - run:
          name: run individual package unittests
          command: |
            . env/bin/activate
            for subdir in */; do
              if [[ -d "$subdir"/tests ]] && [[ "$subdir" != "env/" ]]; then
                cd "$subdir"
                pwd
                if [[ -f "setup.py" ]]; then
                  python setup.py build_ext --inplace 2>/dev/null
                fi
                python -m unittest discover
                cd ../
              fi
            done

  test-doctest:
    docker:
      - image: circleci/python:3.7-stretch # as of march 2019 RTD uses 3.7

    working_directory: ~/repo

    steps:
      - checkout

      - run: *initialize-submodules

      - run: *create-virtualenv

      - run:
          name: install dependencies
          command: |
            . env/bin/activate
            python --version
            pip install .

      - run:
          name: install docs requirements
          command: |
            . env/bin/activate
            pip install wheel
            pip install -r docs/requirements.txt

      - run:
          name: build the docs
          command: |
            . env/bin/activate
            make -C docs/ html

      - store_artifacts:
          path: ./docs/_build/html

      - run:
          name: doctest
          command: |
            . env/bin/activate
            make -C docs/ doctest
      - run:
          name: linkcheck
          command: |
            . env/bin/activate
            make -C docs/ linkcheck || true

  deploy:
    docker:
      - image: circleci/python:3.7

    working_directory: ~/repo

    steps:
      - checkout

      - run: *create-virtualenv

      - run:
          name: verify version matches tag
          command: |
            . env/bin/activate
            pip install .
            echo $CIRCLE_TAG
            [[ "$(pip show dwave-ocean-sdk 2>/dev/null | grep Version)" == "Version: $CIRCLE_TAG" ]]

      - run:
          name: build sdist and bdist
          command: |
            . env/bin/activate
            pip install -U pip setuptools wheel
            python setup.py sdist
            python setup.py bdist_wheel

      - run:
          name: upload
          command: |
            . env/bin/activate
            pip install twine
            twine check dist/*
            twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" --skip-existing ./dist/*

  black-duck:
    docker:
      - image: circleci/openjdk:8-jdk-browsers

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: install python3
          command: |
            sudo apt-get update
            sudo apt-get install build-essential
            sudo apt-get install python3 python3-pip python3-dev python3-virtualenv

      - run:
          name: create virtual env
          command: |
            python3 -m venv env -p python3

      - run:
          name: install package
          command: |
            . env/bin/activate
            pip install .

      - run:
          name: install and run hub-detect
          command: |
            . env/bin/activate
            bash <(curl -s -L https://detect.synopsys.com/detect.sh) --blackduck.url="$BLACKDUCK_URL" --blackduck.api.token="$BLACKDUCK_TOKEN" --detect.code.location.name=dwave-ocean-sdk-circleci --diagnostic --logging.level.detect=DEBUG

      - store_artifacts:
          path: ~/blackduck/runs/


workflows:
  version: 2

  test:
    jobs:
      - test-linux:
          matrix:
            parameters:
              python-version: &python-versions ["3.6.8", "3.7.9", "3.8.9", "3.9.4", "3.10.0"]
      - test-macos:
          matrix:
            parameters:
              python-version: *python-versions
      - test-individual-pkgs
      - test-doctest

  deploy:
    jobs:
      - deploy:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - test-linux:
          matrix:
            parameters:
              python-version: *python-versions
      - test-macos:
          matrix:
            parameters:
              python-version: *python-versions
      - test-doctest
      - black-duck
