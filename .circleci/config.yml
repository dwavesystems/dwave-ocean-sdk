version: 2.1

orbs:
  ocean: dwave/ocean@1

environment:
  PIP_PROGRESS_BAR: 'off'

jobs:
  test-linux:
    parameters:
      python-version:
        type: string

    docker:
      - image: cimg/python:<< parameters.python-version >>

    working_directory: ~/repo

    steps:
      - checkout

      - ocean/pip-install:
          requirements: tests/requirements.txt
          cache: true
          cache-generation: 2

      - ocean/pip-install:
          packages: .
          cache: false

      - ocean/coverage-run-unittest

  test-macos:
    parameters:
      python-version:
        type: string

    executor:
      name: ocean/macos
      xcode: "14.2.0"

    steps:
      - checkout

      - when:
          condition:
            matches:
              pattern: "^3\\.[123][123456789].*$"
              value: << parameters.python-version >>
          steps:
            - run:
                name: Update brew to get latest pyenv
                command: brew update

      - ocean/brew-install-pyenv

      - ocean/pyenv-install-python:
          python-version: << parameters.python-version >>
          cache: true
          cache-generation: 2

      - ocean/pip-install:
          requirements: tests/requirements.txt
          cache: true
          cache-generation: 2

      - ocean/pip-install:
          packages: .
          cache: false

      - ocean/coverage-run-unittest

  test-individual-pkgs:
    docker:
      - image: cimg/python:3.10

    working_directory: ~/repo

    steps:
      - checkout

      - run: &initialize-submodules
          name: initialize submodules
          command: |
            git submodule update --init --recursive

      - run: &create-virtualenv
          name: create virtualenv
          command: |
            python -m venv env

      - run:
          name: install dependencies
          command: |
            . env/bin/activate
            python --version
            for subdir in */; do
              if [[ -f "$subdir"/tests/requirements.txt ]]; then
                pip install -r "$subdir"/tests/requirements.txt
              fi
              if [[ -f "$subdir"/test_requirements.txt ]]; then
                pip install -r "$subdir"/test_requirements.txt
              fi
              if [[ -f "$subdir"/requirements_dev.txt ]]; then
                pip install -r "$subdir"/requirements_dev.txt
              fi
              done
            pip install 'cython<3' wheel cgen
            pip install .[all]
            dwave install --all --yes

      - run:
          name: run individual package unit tests
          command: |
            . env/bin/activate
            for subdir in */; do
              if [[ -d "$subdir"/tests ]] && [[ "$subdir" != "env/" ]]; then
                cd "$subdir"
                pwd
                if [[ -f "setup.py" ]]; then
                  if [[ "$subdir" == "dwave-gate/" ]]; then
                    python dwave/gate/simulator/operation_generation.py
                  fi
                  python setup.py build_ext --inplace 2>/dev/null
                fi
                python -m pytest tests
                cd ../
              fi
            done

  test-doctest:
    docker:
      - image: cimg/python:3.10

    working_directory: ~/repo

    steps:
      - checkout

      - run: *initialize-submodules

      - run: *create-virtualenv

      - run:
          name: install dependencies
          command: |
            . env/bin/activate
            python --version
            pip install .[all]

      - run:
          name: install docs requirements
          command: |
            . env/bin/activate
            pip install wheel
            pip install -r docs/requirements.txt

      - run:
          name: build the docs
          command: |
            . env/bin/activate
            make -C docs/ html

      - store_artifacts:
          path: ./docs/_build/html

      - run:
          name: doctest
          command: |
            . env/bin/activate
            make -C docs/ doctest
      - run:
          name: linkcheck
          command: |
            . env/bin/activate
            make -C docs/ linkcheck || true

  deploy:
    docker:
      - image: cimg/python:3.10

    working_directory: ~/repo

    steps:
      - checkout

      - run: *create-virtualenv

      - run:
          name: verify version matches tag
          command: |
            . env/bin/activate
            pip install .[all]
            echo $CIRCLE_TAG
            [[ "$(pip show dwave-ocean-sdk 2>/dev/null | grep Version)" == "Version: $CIRCLE_TAG" ]]

      - run:
          name: build sdist and bdist
          command: |
            . env/bin/activate
            pip install -U pip setuptools wheel
            python setup.py sdist
            python setup.py bdist_wheel

      - run:
          name: upload
          command: |
            . env/bin/activate
            pip install twine
            twine check dist/*
            twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" --skip-existing ./dist/*

workflows:
  version: 2

  test:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - test-linux:
          matrix:
            parameters:
              python-version: &python-versions ["3.8.19", "3.9.19", "3.10.14", "3.11.9", "3.12.3"]
      - test-macos:
          matrix:
            parameters:
              python-version: *python-versions
      # - test-individual-pkgs
      - test-doctest

  deploy:
    jobs:
      - deploy:
          filters: &on-tag-push
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/

  nightly:
    when:
      equal: [nightly, << pipeline.schedule.name >>]
    jobs:
      - test-linux:
          matrix:
            parameters:
              python-version: *python-versions
      - test-macos:
          matrix:
            parameters:
              python-version: *python-versions
      - test-doctest
