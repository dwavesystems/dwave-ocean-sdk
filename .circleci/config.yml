version: 2.1

orbs:
  node: circleci/node@7
  ocean: dwave/ocean@1
  windows: circleci/windows@5.0

environment:
  PIP_PROGRESS_BAR: 'off'

jobs:
  test-linux:
    parameters:
      python-version:
        type: string

    docker:
      - image: python:<< parameters.python-version >>

    steps:
      - checkout

      - ocean/pip-install:
          requirements: tests/requirements.txt
          cache: true
          cache-generation: 3

      - ocean/pip-install:
          packages: .
          cache: false

      - ocean/coverage-run-unittest

  test-macos:
    parameters:
      python-version:
        type: string

    executor:
      name: ocean/macos
      xcode: "16.2.0"

    steps:
      - checkout

      - ocean/brew-install-pyenv:
          update-homebrew: true

      - ocean/pyenv-install-python:
          python-version: << parameters.python-version >>
          cache: true
          cache-generation: 2

      - ocean/pip-install:
          requirements: tests/requirements.txt
          cache: true
          cache-generation: 2

      - ocean/pip-install:
          packages: .
          cache: false

      - ocean/coverage-run-unittest

  test-windows:
    parameters:
      python-version:
        type: string

    executor:
      name: windows/default

    steps:
      - checkout

      - ocean/nuget-install-python:
          python-version: << parameters.python-version >>
          cache: true

      - ocean/pip-install:
          requirements: tests/requirements.txt
          cache: false

      - ocean/pip-install:
          packages: .
          cache: false

      - ocean/coverage-run-unittest

  test-individual-pkgs:
    docker:
      - image: python:3.12

    steps:
      - checkout

      - run: &initialize-submodules
          name: initialize submodules
          command: |
            git submodule update --init --recursive

      - run: &create-virtualenv
          name: create virtualenv
          command: |
            python -m venv env

      - run:
          name: install dependencies
          command: |
            . env/bin/activate
            python --version
            for subdir in */; do
              if [[ -f "$subdir"/tests/requirements.txt ]]; then
                pip install -r "$subdir"/tests/requirements.txt
              fi
              if [[ -f "$subdir"/test_requirements.txt ]]; then
                pip install -r "$subdir"/test_requirements.txt
              fi
              if [[ -f "$subdir"/requirements_dev.txt ]]; then
                pip install -r "$subdir"/requirements_dev.txt
              fi
              done
            pip install 'cython<3' wheel cgen
            pip install .
            dwave install --all --yes

      - run:
          name: run individual package unit tests
          command: |
            . env/bin/activate
            for subdir in */; do
              if [[ -d "$subdir"/tests ]] && [[ "$subdir" != "env/" ]]; then
                cd "$subdir"
                pwd
                if [[ -f "setup.py" ]]; then
                  if [[ "$subdir" == "dwave-gate/" ]]; then
                    python dwave/gate/simulator/operation_generation.py
                  fi
                  python setup.py build_ext --inplace 2>/dev/null
                fi
                python -m pytest tests
                cd ../
              fi
            done

  test-doctest:
    docker:
      - image: python:3.11

    steps:
      - checkout

      - run: *initialize-submodules

      - run: *create-virtualenv

      - run:
          name: install dependencies
          command: |
            . env/bin/activate
            python --version
            pip install .

      - run:
          name: install docs requirements
          command: |
            . env/bin/activate
            pip install wheel
            pip install -r docs/requirements.txt

      - run:
          name: build the docs
          command: |
            . env/bin/activate
            apt update && apt install -yq doxygen graphviz
            make -C docs/ html

      - store_artifacts:
          path: ./docs/_build/html

      - run:
          name: doctest
          command: |
            . env/bin/activate
            make -C docs/ doctest
      - run:
          name: linkcheck
          command: |
            . env/bin/activate
            make -C docs/ linkcheck || true
      - run:
          # If we add more notebooks in the future we can make this more general.
          name: test scaling guide
          command: |
            . env/bin/activate
            jupyter nbconvert --to notebook --execute docs/downloadables/scaling_for_production.ipynb

  test-package-build:
    docker:
      - image: python:3.12

    steps:
      - checkout

      - run: *create-virtualenv

      - run: &build-package
          name: build package
          command: |
            . env/bin/activate
            pip install -U build
            python -m build

      - run:
          name: twine check
          command: |
            . env/bin/activate
            pip install twine
            twine check dist/*

  test-pa11y:
    docker:
      - image: buildkite/puppeteer:v1.15.0

    steps:
      - checkout
      - run: npm install --global --unsafe-perm pa11y-ci
      - run: pa11y-ci -c ./docs/pa11y.json

  deploy:
    docker:
      - image: python:3.12

    steps:
      - checkout

      - run: *create-virtualenv

      - run:
          name: verify version matches tag
          command: |
            . env/bin/activate
            pip install .
            echo $CIRCLE_TAG
            [[ "$(pip show dwave-ocean-sdk 2>/dev/null | grep Version)" == "Version: $CIRCLE_TAG" ]]

      - run: *build-package

      - run:
          name: upload
          command: |
            . env/bin/activate
            pip install twine
            twine check dist/*
            twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" --skip-existing ./dist/*

workflows:
  version: 2

  test:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      # - test-linux:
      #     matrix:
      #       parameters:
      #         python-version: &python-versions ["3.9.21", "3.10.16", "3.11.11", "3.12.8", "3.13.1"]
      # - test-macos:
      #     matrix:
      #       parameters:
      #         python-version: *python-versions
      # - test-windows:
      #     matrix:
      #       parameters:
      #         # note: limit to versions available via nuget
      #         python-version: &python-versions-windows ["3.9.13", "3.10.11", "3.11.9", "3.12.8", "3.13.1"]
      # # - test-individual-pkgs
      # - test-doctest
      # - test-package-build
      - test-pa11y

  # deploy:
  #   jobs:
  #     - deploy:
  #         filters: &on-tag-push
  #           tags:
  #             only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
  #           branches:
  #             ignore: /.*/

  # nightly:
  #   when:
  #     equal: [nightly, << pipeline.schedule.name >>]
  #   jobs:
  #     - test-linux:
  #         matrix:
  #           parameters:
  #             python-version: *python-versions
  #     - test-macos:
  #         matrix:
  #           parameters:
  #             python-version: *python-versions
  #     - test-windows:
  #         matrix:
  #           parameters:
  #             python-version: *python-versions-windows
  #     - test-doctest
